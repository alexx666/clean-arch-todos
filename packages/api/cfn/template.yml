Transform: AWS::Serverless-2016-10-31

Globals:
  # Api:
  #   Cors:
  #     AllowMethods: "'OPTIONS,POST,GET,DELETE,PUT'"
  #     AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #     AllowOrigin: "'*'"
  Function:
    MemorySize: 512
    Runtime: nodejs16.x
    Handler: index.handler
    Environment:
      Variables:
        DYNAMO_TABLE_NAME: !Ref EventStore
        SNS_TOPIC_ARN: !Ref Mediator
        AWS_ENDPOINT_URL: !Ref DynamoDbEndpoint
        # NODE_OPTIONS: --enable-source-maps
    Tags:
      Project: !Ref Project
      Environment: !Ref Environment

Description: Clean Arch Todos API

# Metadata:
#   template metadata

Parameters:
  Version:
    Type: String
    Default: v1

  Project:
    Type: String
    Default: CleanArchTodos

  Environment:
    Type: String
    Default: dev

  DynamoDbEndpoint:
    Type: String
    Default: ""

# Mappings:
#   set of mappings

# Conditions:
#   set of conditions

Resources:
  TodosAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${AWS::StackName}-gw
      StageName: !Ref Version
      EndpointConfiguration:
        Type: REGIONAL
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./swagger.yml
      Tags:
        Project: !Ref Project
        Environment: !Ref Environment

  Mediator:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-mediator
      KmsMasterKeyId: alias/aws/sns
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment

  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: 2008-10-17
        Id: PublicationPolicy
        Statement:
          - Sid: Allow-SNS-SendMessage
            Effect: Allow
            Principal:
              Service:
                - sns.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: "*"
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref Mediator
      Queues:
        - !Ref StoreEventQueue

  EventStore:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-event-store
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: stream
          AttributeType: "S"
        - AttributeName: timestamp
          AttributeType: "N"
      KeySchema:
        - AttributeName: stream
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment

  CreateList:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-create-list
      Timeout: 30
      CodeUri: packages/api/src/infrastructure/lambda/create-list/
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonSNSFullAccess
      Events:
        PostList:
          Type: Api
          Properties:
            Auth:
              Authorizer: NONE
            RestApiId: !Ref TodosAPI
            Path: /lists
            Method: POST
    Metadata:
      BuildMethod: esbuild

  CreateListLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CreateList}
      RetentionInDays: 14
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment

  CreateTodo:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-create-todo
      Timeout: 30
      CodeUri: packages/api/src/infrastructure/lambda/create-todo/
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonSNSFullAccess
      Events:
        PostTodo:
          Type: Api
          Properties:
            Auth:
              Authorizer: NONE
            RestApiId: !Ref TodosAPI
            Path: /lists/{listId}/todos
            Method: POST
    Metadata:
      BuildMethod: esbuild

  CreateTodoLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CreateTodo}
      RetentionInDays: 14
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment

  DeleteTodo:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-delete-todo
      Timeout: 30
      CodeUri: packages/api/src/infrastructure/lambda/delete-todo/
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonSNSFullAccess
      Events:
        DeleteTodo:
          Type: Api
          Properties:
            Auth:
              Authorizer: NONE
            RestApiId: !Ref TodosAPI
            Path: /lists/{listId}/todos/{todoId}
            Method: DELETE
    Metadata:
      BuildMethod: esbuild

  DeleteTodoLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteTodo}
      RetentionInDays: 14
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment

  ListTodos:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-list-todos
      Timeout: 30
      CodeUri: packages/api/src/infrastructure/lambda/list-todos/
      Policies:
        - AmazonDynamoDBFullAccess
      Events:
        GetTodo:
          Type: Api
          Properties:
            Auth:
              Authorizer: NONE
            RestApiId: !Ref TodosAPI
            Path: /lists/{listId}/todos
            Method: GET
    Metadata:
      BuildMethod: esbuild

  ListTodosLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ListTodos}
      RetentionInDays: 14
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment

  StoreEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600
      QueueName: !Sub ${AWS::StackName}-store-queue
      VisibilityTimeout: 900
      SqsManagedSseEnabled: true
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment

  StoreEventSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref Mediator
      Endpoint: !GetAtt StoreEventQueue.Arn
      Protocol: sqs
      RawMessageDelivery: true

  StoreEvent:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 900
      FunctionName: !Sub ${AWS::StackName}-store-event
      CodeUri: packages/api/src/infrastructure/lambda/store-event/
      Policies:
        - AmazonDynamoDBFullAccess
      Events:
        OnSQSEvent:
          Type: SQS
          Properties:
            BatchSize: 10
            Enabled: true
            Queue: !GetAtt StoreEventQueue.Arn
    Metadata:
      BuildMethod: esbuild

  StoreEventLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${StoreEvent}
      RetentionInDays: 14
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment

Outputs:
  ClikcableAPIUrl:
    Description: API url
    Value: !Sub https://${TodosAPI}.execute-api.${AWS::Region}.amazonaws.com/${Version}

  SNSTopicArn:
    Description: SNS Topic ARN
    Value: !Ref Mediator

  EventStoreName:
    Description: DynamoDB table name
    Value: !Ref EventStore
