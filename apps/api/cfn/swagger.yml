openapi: 3.0.1

info:
  version: 1.0.0
  title: Clean Arch Todos API
  
tags:
  - name: todos

paths:

  /lists/{listId}/todos:

    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET,DELETE,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"

    get:
      tags:
        - todos
      summary: List Todos
      operationId: listTodos
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Array of Todos for the specified list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTodosResponse"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListTodos.Arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy

    post:
      tags:
        - todos
      summary: Create Todo
      operationId: createTodo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Todo parameters
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTodoParams"
      responses:
        200:
          description: Created Todos UUID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UUID"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTodo.Arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy

  /lists/{listId}/todos/{todoId}:

    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET,DELETE,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"

    delete:
      tags:
        - todos
      summary: Delete Todo
      operationId: deleteTodo
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
        - name: todoId
          in: path
          required: true
          schema:
            type: string
      responses:
        201:
          description: Delete Todo Success
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTodo.Arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy

  /lists:

    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET,DELETE,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"

    post:
      tags:
        - todos
      summary: Create List
      operationId: createList
      requestBody:
        description: List parameters
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateListParams"
      responses:
        201:
          description: Create List Success
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateList.Arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
          
components:

  schemas:

    Todo:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        start:
          type: string
          format: date
        end:
          type: string
          format: date
        expired:
          type: boolean
        isDeleted:
          type: boolean

    CreateListParams:
      type: object
      properties:
        name:
          type: string
        allowExpired:
          type: boolean

    UUID:
      type: object
      properties:
        id:
          type: string

    CreateTodoParams:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        start:
          type: string
          format: date
        end:
          type: string
          format: date

    ListTodosResponse:
      type: object
      properties:
        count:
          type: number
        listName:
          type: string
        items:
          type: array
          items:
            $ref: "#/components/schemas/Todo"
        links:
          type: array
          items:
            $ref: "#/components/schemas/Link"
            
    Link:
      type: object
      properties:
        href:
          type: string
        rel:
          type: string